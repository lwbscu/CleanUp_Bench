#!/bin/bash

# OSGTÂõõÁ±ªÁâ©‰ΩìCleanUp_Bench ÂêØÂä®ËÑöÊú¨
# Áî®‰∫éËøêË°å Create-3+Êú∫Ê¢∞ËáÇ OSGTÊ†áÂáÜÂÆ§ÂÜÖÊ∏ÖÊ¥ÅÊºîÁ§∫
# üöß OÁ±ª-ÈöúÁ¢çÁâ©ÈÅøËÆ© | üßπ SÁ±ª-ÂèØÊ∏ÖÊâ´Áâ©Âê∏ÈôÑ | ü¶æ GÁ±ª-ÂèØÊäìÂèñÁâ©Á≤æÁ°ÆÊìç‰Ωú | üéØ TÁ±ª-‰ªªÂä°Âå∫‰∫§‰∫í
# ‰ΩøÁî®ÈÖçÁΩÆÊñá‰ª∂Ëá™Âä®Ê£ÄÊµãË∑ØÂæÑÔºåÊîØÊåÅÂ§öÁî®Êà∑ÁéØÂ¢É

set -e

# È¢úËâ≤ÂÆö‰πâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# ÊâìÂç∞Â∏¶È¢úËâ≤ÁöÑÊ∂àÊÅØ
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${PURPLE}[OSGT]${NC} $1"
}

print_osgt() {
    echo -e "${CYAN}[OSGT]${NC} $1"
}

# Ëé∑ÂèñËÑöÊú¨ÊâÄÂú®ÁõÆÂΩï
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
SCRIPTS_DIR="$SCRIPT_DIR/scripts"

print_header "OSGTÂõõÁ±ªÁâ©‰ΩìÊ†áÂáÜ Create-3+Êú∫Ê¢∞ËáÇÂÆ§ÂÜÖÊ∏ÖÊ¥ÅÁ≥ªÁªüÂêØÂä®Âô®"
print_osgt "üöß OÁ±ª-ÈöúÁ¢çÁâ©ÈÅøËÆ© | üßπ SÁ±ª-ÂèØÊ∏ÖÊâ´Áâ©Âê∏ÈôÑ | ü¶æ GÁ±ª-ÂèØÊäìÂèñÁâ©Á≤æÁ°ÆÊìç‰Ωú | üéØ TÁ±ª-‰ªªÂä°Âå∫‰∫§‰∫í"
print_info "È°πÁõÆÁõÆÂΩï: $SCRIPT_DIR"

# Ê£ÄÊü•Áî®Êà∑ÂêçÈÖçÁΩÆ
CURRENT_USER=${USER:-${USERNAME:-$(whoami)}}
print_info "ÂΩìÂâçÁî®Êà∑: $CURRENT_USER"

# Ê£ÄÊü•ÂøÖË¶ÅÊñá‰ª∂
print_info "Ê£ÄÊü•OSGTÁ≥ªÁªüÊñá‰ª∂..."

REQUIRED_FILES=(
    "$SCRIPTS_DIR/ultra_stable_create3.py"
    "$SCRIPTS_DIR/config.py"
    "$SCRIPTS_DIR/advanced_navigation.py"
    "$SCRIPTS_DIR/pick_and_place.py"
)

MISSING_FILES=0
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        print_error "Êâæ‰∏çÂà∞Êñá‰ª∂: $(basename $file)"
        MISSING_FILES=$((MISSING_FILES + 1))
    else
        print_success "‚úì $(basename $file)"
    fi
done

if [ $MISSING_FILES -gt 0 ]; then
    print_error "Áº∫Â∞ë $MISSING_FILES ‰∏™ÂøÖÈúÄÊñá‰ª∂ÔºåËØ∑Ê£ÄÊü•È°πÁõÆÂÆåÊï¥ÊÄß"
    exit 1
fi

print_success "OSGTÁ≥ªÁªüÊñá‰ª∂Ê£ÄÊü•ÈÄöËøá"

# ‰ΩøÁî®PythonÊ£ÄÊµãOSGTÈÖçÁΩÆÁöÑË∑ØÂæÑ
print_info "‰ΩøÁî®OSGTÈÖçÁΩÆÊñá‰ª∂Ê£ÄÊµãÁ≥ªÁªüË∑ØÂæÑ..."

PYTHON_CHECK_SCRIPT="
import sys
sys.path.insert(0, '$SCRIPTS_DIR')
try:
    from config import OSGTCleanupSystemConfig
    config = OSGTCleanupSystemConfig()
    
    print('RESIDENTIAL_ASSETS=' + config.PATHS['residential_assets_root'])
    print('ROBOT_USD=' + config.PATHS['robot_usd_path'])
    print('ISAAC_SIM_PATH=' + config.USER_PATHS['isaac_sim_install'])
    print('USERNAME=' + config.USERNAME)
    print('SCENARIO_TYPE=' + config.SCENARIO_TYPE)
    
    # ËæìÂá∫OSGTÁâ©‰ΩìÊï∞Èáè
    print('OSGT_OBSTACLES=' + str(len(config.OBSTACLES_POSITIONS)))
    print('OSGT_SWEEPABLE=' + str(len(config.SWEEPABLE_POSITIONS)))
    print('OSGT_GRASPABLE=' + str(len(config.GRASPABLE_POSITIONS)))
    print('OSGT_TASK_AREAS=' + str(len(config.TASK_AREAS_POSITIONS)))
    
    # ËæìÂá∫È™åËØÅÁªìÊûú
    if hasattr(config, '_path_validation_results'):
        valid_paths = sum(1 for status in config._path_validation_results.values() if '‚úÖ' in status)
        total_paths = len(config._path_validation_results)
        print('VALIDATION_RESULT=' + str(valid_paths) + '/' + str(total_paths))
    else:
        print('VALIDATION_RESULT=unknown')
    
except Exception as e:
    print('ERROR: Failed to load OSGT config: ' + str(e))
    sys.exit(1)
"

# ÊâßË°åPythonÊ£ÄÊµãËÑöÊú¨
DETECTION_OUTPUT=$(python3 -c "$PYTHON_CHECK_SCRIPT" 2>/dev/null)
if [ $? -ne 0 ]; then
    print_error "OSGTÈÖçÁΩÆÊñá‰ª∂Ê£ÄÊµãÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•PythonÁéØÂ¢ÉÂíåÈÖçÁΩÆÊñá‰ª∂"
    print_info "ËØ∑Á°Æ‰øù‰ª•‰∏ãÊù°‰ª∂Êª°Ë∂≥Ôºö"
    print_info "  1. Python3 Â∑≤ÂÆâË£Ö"
    print_info "  2. config.py Êñá‰ª∂Â≠òÂú®‰∏îËØ≠Ê≥ïÊ≠£Á°ÆÔºà‰ΩøÁî®OSGTCleanupSystemConfigÔºâ"
    print_info "  3. OSGTË∑ØÂæÑÈÖçÁΩÆÊ≠£Á°Æ"
    exit 1
fi

# Ëß£ÊûêÊ£ÄÊµãÁªìÊûú
while IFS= read -r line; do
    if [[ $line == RESIDENTIAL_ASSETS=* ]]; then
        RESIDENTIAL_ASSETS="${line#RESIDENTIAL_ASSETS=}"
    elif [[ $line == ROBOT_USD=* ]]; then
        ROBOT_USD="${line#ROBOT_USD=}"
    elif [[ $line == ISAAC_SIM_PATH=* ]]; then
        ISAAC_SIM_PATH="${line#ISAAC_SIM_PATH=}"
    elif [[ $line == USERNAME=* ]]; then
        DETECTED_USERNAME="${line#USERNAME=}"
    elif [[ $line == SCENARIO_TYPE=* ]]; then
        SCENARIO_TYPE="${line#SCENARIO_TYPE=}"
    elif [[ $line == OSGT_OBSTACLES=* ]]; then
        OSGT_OBSTACLES="${line#OSGT_OBSTACLES=}"
    elif [[ $line == OSGT_SWEEPABLE=* ]]; then
        OSGT_SWEEPABLE="${line#OSGT_SWEEPABLE=}"
    elif [[ $line == OSGT_GRASPABLE=* ]]; then
        OSGT_GRASPABLE="${line#OSGT_GRASPABLE=}"
    elif [[ $line == OSGT_TASK_AREAS=* ]]; then
        OSGT_TASK_AREAS="${line#OSGT_TASK_AREAS=}"
    elif [[ $line == VALIDATION_RESULT=* ]]; then
        VALIDATION_RESULT="${line#VALIDATION_RESULT=}"
    elif [[ $line == ERROR:* ]]; then
        print_error "${line#ERROR: }"
        exit 1
    fi
done <<< "$DETECTION_OUTPUT"

print_success "OSGTÈÖçÁΩÆÊ£ÄÊµãÂÆåÊàê"
print_info "Ê£ÄÊµãÂà∞ÁöÑOSGTÈÖçÁΩÆ:"
echo "  üë§ Áî®Êà∑: $DETECTED_USERNAME"
echo "  üè¢ Âú∫ÊôØÁ±ªÂûã: $SCENARIO_TYPE"
echo "  ü§ñ Êú∫Âô®‰∫∫Ê®°Âûã: $ROBOT_USD"
echo "  üè† ‰ΩèÂÆÖËµÑ‰∫ßÂ∫ì: $RESIDENTIAL_ASSETS"
echo "  üîß Isaac Sim: $ISAAC_SIM_PATH"
echo "  ‚úÖ Ë∑ØÂæÑÈ™åËØÅ: $VALIDATION_RESULT"

print_osgt "OSGTÂõõÁ±ªÁâ©‰ΩìÈÖçÁΩÆ:"
echo "  üöß OÁ±ªÈöúÁ¢çÁâ©: $OSGT_OBSTACLES ‰∏™"
echo "  üßπ SÁ±ªÂèØÊ∏ÖÊâ´Áâ©: $OSGT_SWEEPABLE ‰∏™"
echo "  ü¶æ GÁ±ªÂèØÊäìÂèñÁâ©: $OSGT_GRASPABLE ‰∏™"
echo "  üéØ TÁ±ª‰ªªÂä°Âå∫: $OSGT_TASK_AREAS ‰∏™"

# Ê£ÄÊü•Ë∑ØÂæÑÊúâÊïàÊÄß
print_info "È™åËØÅOSGTÁ≥ªÁªüÂÖ≥ÈîÆË∑ØÂæÑ..."

MISSING_PATHS=0

# Ê£ÄÊü•Êú∫Âô®‰∫∫Ê®°Âûã
if [ -f "$ROBOT_USD" ]; then
    ROBOT_SIZE=$(du -h "$ROBOT_USD" | cut -f1)
    print_success "‚úì Êú∫Âô®‰∫∫Ê®°Âûã: create_3_with_arm.usd ($ROBOT_SIZE)"
else
    print_error "‚úó Êú∫Âô®‰∫∫Ê®°ÂûãÁº∫Â§±: $ROBOT_USD"
    MISSING_PATHS=$((MISSING_PATHS + 1))
fi

# Ê£ÄÊü•‰ΩèÂÆÖËµÑ‰∫ßÂ∫ì
if [ -d "$RESIDENTIAL_ASSETS" ]; then
    ASSET_COUNT=$(find "$RESIDENTIAL_ASSETS" -name "*.usd" 2>/dev/null | wc -l)
    print_success "‚úì ‰ΩèÂÆÖËµÑ‰∫ßÂ∫ì: $ASSET_COUNT ‰∏™USDÊñá‰ª∂"
    
    # Ê£ÄÊü•OSGTÂÖ≥ÈîÆËµÑ‰∫ßÁ±ªÂà´
    FURNITURE_COUNT=$(find "$RESIDENTIAL_ASSETS/Furniture" -name "*.usd" 2>/dev/null | wc -l)
    DECOR_COUNT=$(find "$RESIDENTIAL_ASSETS/Decor" -name "*.usd" 2>/dev/null | wc -l)
    MISC_COUNT=$(find "$RESIDENTIAL_ASSETS/Misc" -name "*.usd" 2>/dev/null | wc -l)
    
    if [ $FURNITURE_COUNT -gt 0 ]; then
        print_success "  ‚úì OÁ±ªÈöúÁ¢çÁâ©ËµÑ‰∫ß: $FURNITURE_COUNT ‰∏™ÂÆ∂ÂÖ∑Ê®°Âûã"
    fi
    if [ $DECOR_COUNT -gt 0 ]; then
        print_success "  ‚úì SÁ±ª/GÁ±ªÁâ©ÂìÅËµÑ‰∫ß: $DECOR_COUNT ‰∏™Ë£ÖÈ•∞Ê®°Âûã"
    fi
    if [ $MISC_COUNT -gt 0 ]; then
        print_success "  ‚úì GÁ±ªÂ∑•ÂÖ∑ËµÑ‰∫ß: $MISC_COUNT ‰∏™ÊùÇÈ°πÊ®°Âûã"
    fi
else
    print_error "‚úó ‰ΩèÂÆÖËµÑ‰∫ßÂ∫ìÁº∫Â§±: $RESIDENTIAL_ASSETS"
    print_warning "  OSGTÁ≥ªÁªüÈúÄË¶Å‰ΩèÂÆÖËµÑ‰∫ßÂ∫ìÊîØÊåÅÂõõÁ±ªÁâ©‰ΩìÂú∫ÊôØ"
    MISSING_PATHS=$((MISSING_PATHS + 1))
fi

# Ê£ÄÊü•Isaac SimÂÆâË£Ö
if [ -d "$ISAAC_SIM_PATH" ]; then
    print_success "‚úì Isaac SimÂÆâË£ÖÁõÆÂΩï"
    
    # Ê£ÄÊü•Isaac Sim PythonËÑöÊú¨
    if [ -f "$ISAAC_SIM_PATH/python.sh" ]; then
        print_success "  ‚úì Isaac Sim PythonÂêØÂä®ËÑöÊú¨"
    else
        print_warning "  ‚ö† python.sh Êú™ÊâæÂà∞ÔºåÂ∞Ü‰ΩøÁî®Á≥ªÁªüPython"
    fi
else
    print_error "‚úó Isaac SimÂÆâË£ÖÁõÆÂΩïÁº∫Â§±: $ISAAC_SIM_PATH"
    MISSING_PATHS=$((MISSING_PATHS + 1))
fi

if [ $MISSING_PATHS -gt 0 ]; then
    print_error "ÂèëÁé∞ $MISSING_PATHS ‰∏™Ë∑ØÂæÑÈóÆÈ¢ò"
    print_warning "ËØ∑Ê£ÄÊü•Âπ∂Êõ¥Êñ∞OSGTÈÖçÁΩÆÊñá‰ª∂‰∏≠ÁöÑË∑ØÂæÑËÆæÁΩÆ"
    print_info "ÈÖçÁΩÆÊñá‰ª∂‰ΩçÁΩÆ: $SCRIPTS_DIR/config.py"
    print_info "ÊÇ®ÂèØ‰ª•Ôºö"
    print_info "  1. Âú®config.py‰∏≠ÊâãÂä®ËÆæÁΩÆÊ≠£Á°ÆÁöÑË∑ØÂæÑ"
    print_info "  2. Á°ÆËÆ§Áî®Êà∑ÂêçÊòØÂê¶Ê≠£Á°Æ (ÂΩìÂâç: $DETECTED_USERNAME)"
    print_info "  3. Ê£ÄÊü•Isaac SimÊòØÂê¶Ê≠£Á°ÆÂÆâË£Ö"
    print_info "  4. Ê£ÄÊü•‰ΩèÂÆÖËµÑ‰∫ßÂåÖÊòØÂê¶Â∑≤‰∏ãËΩΩ"
    print_info "  5. ‰ΩøÁî®Âø´ÈÄüÈÖçÁΩÆÈ¢ÑËÆæÔºöOSGTQuickConfigs.residential_scene()"
    
    read -p "ÊòØÂê¶‰ªçË¶ÅÁªßÁª≠ËøêË°åOSGTÁ≥ªÁªüÔºü(y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "Â∑≤ÂèñÊ∂àOSGTÁ≥ªÁªüÂêØÂä®"
        exit 1
    fi
fi

print_success "OSGTË∑ØÂæÑÈ™åËØÅÂÆåÊàê"

# Ê£ÄÊü•condaÁéØÂ¢É
if [ -z "$CONDA_DEFAULT_ENV" ]; then
    print_warning "Êú™Ê£ÄÊµãÂà∞condaÁéØÂ¢É"
    print_info "Âª∫ËÆÆÊøÄÊ¥ªÈÄÇÂΩìÁöÑcondaÁéØÂ¢ÉÔºå‰æãÂ¶Ç:"
    print_info "  conda activate isaaclab_4_5_0"
    print_info "  ÊàñËÄÖ conda activate isaac-sim"
else
    print_success "ÂΩìÂâçcondaÁéØÂ¢É: $CONDA_DEFAULT_ENV"
fi

# Ê£ÄÊü•PythonÁéØÂ¢ÉÂíå‰æùËµñ
print_info "Ê£ÄÊü•OSGT PythonÁéØÂ¢É..."
if command -v python3 &> /dev/null; then
    PYTHON_VERSION=$(python3 --version 2>&1 | cut -d' ' -f2)
    print_success "PythonÁâàÊú¨: $PYTHON_VERSION"
    
    # Ê£ÄÊü•ÂÖ≥ÈîÆPythonÂåÖ
    PYTHON_PACKAGES_CHECK="
import sys
try:
    import numpy as np
    print('‚úì NumPy:', np.__version__)
except ImportError:
    print('‚úó NumPy: Êú™ÂÆâË£Ö')

try:
    import time, math, random, collections, heapq
    print('‚úì Ê†áÂáÜÂ∫ì: ÂÆåÊï¥')
except ImportError:
    print('‚úó Ê†áÂáÜÂ∫ì: Áº∫Â§±ÁªÑ‰ª∂')

try:
    import cupy as cp
    print('‚úì CuPy:', cp.__version__, '(CUDAÂä†ÈÄü)')
except ImportError:
    print('‚ö† CuPy: Êú™ÂÆâË£Ö (Â∞Ü‰ΩøÁî®CPUÊ®°Âºè)')

try:
    from scipy.spatial.transform import Rotation
    print('‚úì SciPy: ÂèØÁî®')
except ImportError:
    print('‚ö† SciPy: Êú™ÂÆâË£Ö (Â∞Ü‰ΩøÁî®ÁÆÄÂåñÊóãËΩ¨)')
"
    echo "  Ê£ÄÊü•OSGT‰æùËµñÂåÖ:"
    python3 -c "$PYTHON_PACKAGES_CHECK" 2>/dev/null | sed 's/^/    /'
else
    print_error "Êú™ÊâæÂà∞Python3"
    exit 1
fi

# Ê£ÄÊü•CUDAÔºàÂ¶ÇÊûúÂèØÁî®Ôºâ
print_info "Ê£ÄÊü•OSGT CUDAÁéØÂ¢É..."
if command -v nvidia-smi &> /dev/null; then
    GPU_INFO=$(nvidia-smi --query-gpu=name --format=csv,noheader 2>/dev/null | head -1)
    if [ ! -z "$GPU_INFO" ]; then
        print_success "GPU: $GPU_INFO"
        CUDA_VERSION=$(nvidia-smi | grep "CUDA Version" | sed 's/.*CUDA Version: \([0-9.]*\).*/\1/')
        if [ ! -z "$CUDA_VERSION" ]; then
            print_success "CUDAÁâàÊú¨: $CUDA_VERSION"
            print_osgt "üöÄ OSGTÁ≥ªÁªüÂ∞ÜÂêØÁî®CUDAÂä†ÈÄüË∑ØÂæÑËßÑÂàíÂíåÊäìÂèñÁÆóÊ≥ï"
        fi
    fi
else
    print_warning "Êú™Ê£ÄÊµãÂà∞NVIDIA GPUÊàñÈ©±Âä®"
    print_osgt "‚ö° OSGTÁ≥ªÁªüÂ∞Ü‰ΩøÁî®CPUÊ®°ÂºèÔºàÊÄßËÉΩËæÉ‰Ωé‰ΩÜÂÖºÂÆπÊÄßÊõ¥Â•ΩÔºâ"
fi

# ËøõÂÖ•Isaac SimÁõÆÂΩï
print_info "ÂàáÊç¢Âà∞Isaac SimÁõÆÂΩï: $ISAAC_SIM_PATH"
cd "$ISAAC_SIM_PATH"

# Ê£ÄÊü•PythonÂêØÂä®ËÑöÊú¨
if [ ! -f "$ISAAC_SIM_PATH/python.sh" ]; then
    print_warning "Isaac SimÁõÆÂΩï‰∏≠Êú™ÊâæÂà∞python.sh"
    
    # Â§çÂà∂Êàë‰ª¨ÁöÑOSGT‰ºòÂåñÁâàpython.shËÑöÊú¨
    if [ -f "$SCRIPTS_DIR/python.sh" ]; then
        cp "$SCRIPTS_DIR/python.sh" "$ISAAC_SIM_PATH/python.sh"
        chmod +x "$ISAAC_SIM_PATH/python.sh"
        print_success "‰ΩøÁî®OSGT‰ºòÂåñÁâàpython.shÂêØÂä®ËÑöÊú¨"
    else
        # ÂàõÂª∫ÁÆÄÂçïÁöÑpython.shËÑöÊú¨
        cat > "$ISAAC_SIM_PATH/python.sh" << 'EOF'
#!/bin/bash
# ÁÆÄÂçïÁöÑIsaac Sim PythonÂêØÂä®ËÑöÊú¨
exec python "$@"
EOF
        chmod +x "$ISAAC_SIM_PATH/python.sh"
        print_success "ÂàõÂª∫‰∫Üpython.shÂêØÂä®ËÑöÊú¨"
    fi
fi

# ÊòæÁ§∫OSGTÂêØÂä®‰ø°ÊÅØ
print_header "ÂáÜÂ§áÂêØÂä®OSGTÂõõÁ±ªÁâ©‰ΩìÂÆ§ÂÜÖÊ∏ÖÊ¥ÅÊºîÁ§∫..."
print_info "OSGTÁ≥ªÁªüÈÖçÁΩÆÊëòË¶Å:"
echo "  üë§ Áî®Êà∑: $DETECTED_USERNAME"
echo "  üè¢ Âú∫ÊôØ: $SCENARIO_TYPE (ÂÆ∂Â∫≠/Â≠¶Ê†°/ÂåªÈô¢/Â∑•ÂéÇÈÄöÁî®)"
echo "  ü§ñ Êú∫Âô®‰∫∫: Create-3 + Panda 7DOF Êú∫Ê¢∞ËáÇ"
echo "  üè† ÁéØÂ¢É: ‰ΩèÂÆÖÂÆ§ÂÜÖÁéØÂ¢É"
echo ""
print_osgt "OSGTÂõõÁ±ªÁâ©‰ΩìÈÖçÁΩÆ:"
echo "  üöß OÁ±ªÈöúÁ¢çÁâ©: $OSGT_OBSTACLES ‰∏™ (ÈÅøËÆ©ÂØºËà™)"
echo "  üßπ SÁ±ªÂèØÊ∏ÖÊâ´Áâ©: $OSGT_SWEEPABLE ‰∏™ (Âê∏ÈôÑÊî∂ÈõÜ)"
echo "  ü¶æ GÁ±ªÂèØÊäìÂèñÁâ©: $OSGT_GRASPABLE ‰∏™ (Á≤æÁ°ÆÊäìÂèñ)"
echo "  üéØ TÁ±ª‰ªªÂä°Âå∫: $OSGT_TASK_AREAS ‰∏™ (‰ªªÂä°‰∫§‰∫í)"
echo ""
print_info "OSGTÊÄßËÉΩÁâπÊÄß:"
echo "  üöÄ CUDA GPUÁâ©ÁêÜÂä†ÈÄü"
echo "  üß≠ OSGTÂõõÁ±ªÂØºËà™Á≠ñÁï•"
echo "  ü¶æ Á±ªÂûãÁâπÂÆöÁ≤æÁ°ÆÊäìÂèñ"
echo "  üìÅ ÈÖçÁΩÆÈ©±Âä®ÁöÑË∑ØÂæÑÁÆ°ÁêÜ"
echo "  ‚ö° 120HzÁâ©ÁêÜ + 60FPSÊ∏≤Êüì"
echo "  üß† Êô∫ËÉΩOSGTÁâ©‰ΩìËØÜÂà´"
echo "  üåê Â§öÂú∫ÊôØÈÄöÁî®ËÆæËÆ°"
echo ""
print_info "ÊéßÂà∂ËØ¥Êòé:"
echo "  üëÅÔ∏è Èº†Ê†á: ÊãñÊãΩÊóãËΩ¨ËßÜËßíÔºåÊªöËΩÆÁº©Êîæ"
echo "  ‚å®Ô∏è Ctrl+C: ÂÆâÂÖ®ÈÄÄÂá∫ÊºîÁ§∫"

print_info "ÂêØÂä®ÂëΩ‰ª§: ./python.sh $SCRIPTS_DIR/ultra_stable_create3.py"

# ËÆæÁΩÆOSGTÁéØÂ¢ÉÂèòÈáèÔºà‰øùÊåÅÂêëÂêéÂÖºÂÆπÔºâ
export CLEANUP_BENCH_RESIDENTIAL="$RESIDENTIAL_ASSETS"
export CLEANUP_BENCH_ROBOT="$ROBOT_USD"
export CLEANUP_BENCH_USERNAME="$DETECTED_USERNAME"
export OSGT_SCENARIO_TYPE="$SCENARIO_TYPE"

# ÊòæÁ§∫ËøêË°åÈ¢ÑÊúü
print_success "ÂêØÂä®OSGTÂõõÁ±ªÁâ©‰ΩìÂÆ§ÂÜÖÊ∏ÖÊ¥ÅÊºîÁ§∫..."
print_info "ÊºîÁ§∫Â∞ÜÂåÖÊã¨Ôºö"
echo "  1. üîß OSGTÈÖçÁΩÆÊñá‰ª∂Âä†ËΩΩÂíåË∑ØÂæÑÈ™åËØÅ (5Áßí)"
echo "  2. üè† ÂàõÂª∫OSGTÂõõÁ±ªÁâ©‰ΩìÂú∫ÊôØ (30Áßí)"
echo "  3. ü§ñ Êú∫Âô®‰∫∫Á≥ªÁªüÂàùÂßãÂåñ (30Áßí)"
echo "  4. ü¶æ Êú∫Ê¢∞ËáÇOSGTÂßøÊÄÅÊºîÁ§∫ (30Áßí)"
echo "  5. üßπ SÁ±ªÂèØÊ∏ÖÊâ´Áâ©Êô∫ËÉΩÊî∂ÈõÜ (2-3ÂàÜÈíü)"
echo "  6. ü¶æ GÁ±ªÂèØÊäìÂèñÁâ©Á≤æÁ°ÆÊäìÂèñ (3-4ÂàÜÈíü)"
echo "  7. üéØ TÁ±ª‰ªªÂä°Âå∫ËÆøÈóÆ‰∫§‰∫í (1-2ÂàÜÈíü)"
echo "  8. üè† Êô∫ËÉΩËøîÂõûËµ∑ÁÇπ (1ÂàÜÈíü)"
echo "  9. üìä OSGTÊî∂ÈõÜÁªìÊûúÁªüËÆ°"
echo ""
print_osgt "üöß OÁ±ªÈÅøÈöú | üßπ SÁ±ªÂê∏ÈôÑ | ü¶æ GÁ±ªÁ≤æÁ°ÆÊäìÂèñ | üéØ TÁ±ª‰ªªÂä°ÊâßË°å"
print_info "üí° OSGTÈÖçÁΩÆÊñá‰ª∂: $SCRIPTS_DIR/config.py"
print_info "üí° Â¶ÇÈúÄ‰øÆÊîπË∑ØÂæÑÊàñÂèÇÊï∞ÔºåËØ∑ÁºñËæëÈÖçÁΩÆÊñá‰ª∂"
print_info "üí° ÊîØÊåÅÂú∫ÊôØÂàáÊç¢: residential, school, hospital, factory"
echo ""

# ÊâßË°å‰∏ªÁ®ãÂ∫è
exec ./python.sh "$SCRIPTS_DIR/ultra_stable_create3.py"